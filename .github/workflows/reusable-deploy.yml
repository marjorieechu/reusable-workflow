name: 🔁 Reusable Deployment Workflow

on:
  workflow_call:
    secrets:
      GIT_CLONE_USER:
        required: true
      GIT_CLONE_TOKEN:
        required: true
    inputs:
      config_repo:
        description: "Configuration repo name (optional)"
        required: false
        default: "configurations"

jobs:
  deploy:
    runs-on: ["linux", "self-hosted", "ubuntu", "custom-runner", "docker"]

    steps:
      - name: 🏷️ Get Branch Name
        id: branch
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: 🚨 Validate Branch Name
        run: |
          if [[ ! "${{ env.branch_name }}" =~ ^(feature|bug|hotfix|chore|release)\/[a-zA-Z0-9._-]+$ && "${{ env.branch_name }}" != "develop" && "${{ env.branch_name }}" != "production" ]]; then
            echo "❌ Invalid branch name '${{ env.branch_name }}'"
            exit 1
          fi

      - name: 🔢 Setup Vault
        run: |
          echo "COMMIT_SHA_SHORT=$(git rev-parse --short=4 HEAD)" >> $GITHUB_ENV         
          echo VAULT_USERNAME=${{ vars.VAULT_USERNAME  }} >> $GITHUB_ENV
          echo VAULT_PASSWORD=${{ vars.VAULT_PASSWORD }} >> $GITHUB_ENV
          echo VAULT_ADDR=${{ vars.VAULT_ADDR }} >> $GITHUB_ENV
          export VAULT_ADDR=${{ vars.VAULT_ADDR }}
          vault login -method=userpass username=${{ vars.VAULT_USERNAME }} password=${{ vars.VAULT_PASSWORD }}

          secrets=(
            STAGE_AWS_BASE_IMAGE STAGE_AWS_DEFAULT_REGION STAGE_DEPLOY_USER_AWS_ACCESS_KEY_ID
            STAGE_AWS_ACCOUNT_ID STAGE_DEPLOY_USER_AWS_SECRET_ACCESS_KEY
            STAGE_DATABASE_PASSWORD STAGE_DB_ROOT_PASSWORD STAGE_DB_ROOT_USER
            MAIL_PASSWORD MIX_PUSHER_APP_CLUSTER MIX_PUSHER_APP_KEY
            PUSHER_APP_CLUSTER PUSHER_APP_ID PUSHER_APP_KEY PUSHER_APP_SECRET
          )

          for secret in "${secrets[@]}"; do
            value=$(vault kv get -field=$secret Dev-secret/AWS_STAGE_ACCOUNT 2>/dev/null || vault kv get -field=$secret Dev-secret/DATABASES 2>/dev/null || vault kv get -field=$secret Dev-secret/CONNECT_BACKEND 2>/dev/null)
            echo "$secret=$value" >> $GITHUB_ENV
          done

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.STAGE_DEPLOY_USER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.STAGE_DEPLOY_USER_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.STAGE_AWS_DEFAULT_REGION }}

      - name: 🔑 Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.STAGE_AWS_DEFAULT_REGION }} | \
          docker login --username AWS --password-stdin \
          ${{ env.STAGE_AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.STAGE_AWS_DEFAULT_REGION }}.amazonaws.com

      - name: 🔢 Clone Repositories
        run: |
          rm -rf configurations connect-frontend connect-backend || true

          BACKEND_BRANCH=$(grep -w BACKEND_BRANCH values.conf | cut -d'=' -f2 | tr -d ' ')
          FRONTEND_BRANCH=$(grep -w FRONTEND_BRANCH values.conf | cut -d'=' -f2 | tr -d ' ')
          echo "BACKEND_BRANCH=$BACKEND_BRANCH" >> $GITHUB_ENV
          echo "FRONTEND_BRANCH=$FRONTEND_BRANCH" >> $GITHUB_ENV

          git clone https://${{ secrets.GIT_CLONE_USER }}:${{ secrets.GIT_CLONE_TOKEN }}@git.edusuc.net/WEBFORX/${{ inputs.config_repo }}.git
          git clone -b "$FRONTEND_BRANCH" https://${{ secrets.GIT_CLONE_USER }}:${{ secrets.GIT_CLONE_TOKEN }}@git.edusuc.net/WEBFORX/connect-frontend.git
          git clone -b "$BACKEND_BRANCH" https://${{ secrets.GIT_CLONE_USER }}:${{ secrets.GIT_CLONE_TOKEN }}@git.edusuc.net/WEBFORX/connect-backend.git
